# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_libspot', [dirname(__file__)])
        except ImportError:
            import _libspot
            return _libspot
        if fp is not None:
            try:
                _mod = imp.load_module('_libspot', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _libspot = swig_import_helper()
    del swig_import_helper
else:
    import _libspot
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libspot.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _libspot.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _libspot.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _libspot.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _libspot.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _libspot.SwigPyIterator_equal(self, x)

    def copy(self):
        return _libspot.SwigPyIterator_copy(self)

    def next(self):
        return _libspot.SwigPyIterator_next(self)

    def __next__(self):
        return _libspot.SwigPyIterator___next__(self)

    def previous(self):
        return _libspot.SwigPyIterator_previous(self)

    def advance(self, n):
        return _libspot.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _libspot.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _libspot.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _libspot.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _libspot.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _libspot.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _libspot.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _libspot.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libspot.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libspot.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _libspot.DoubleVector___bool__(self)

    def __len__(self):
        return _libspot.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _libspot.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libspot.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libspot.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libspot.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libspot.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libspot.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _libspot.DoubleVector_pop(self)

    def append(self, x):
        return _libspot.DoubleVector_append(self, x)

    def empty(self):
        return _libspot.DoubleVector_empty(self)

    def size(self):
        return _libspot.DoubleVector_size(self)

    def swap(self, v):
        return _libspot.DoubleVector_swap(self, v)

    def begin(self):
        return _libspot.DoubleVector_begin(self)

    def end(self):
        return _libspot.DoubleVector_end(self)

    def rbegin(self):
        return _libspot.DoubleVector_rbegin(self)

    def rend(self):
        return _libspot.DoubleVector_rend(self)

    def clear(self):
        return _libspot.DoubleVector_clear(self)

    def get_allocator(self):
        return _libspot.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _libspot.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _libspot.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _libspot.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _libspot.DoubleVector_push_back(self, x)

    def front(self):
        return _libspot.DoubleVector_front(self)

    def back(self):
        return _libspot.DoubleVector_back(self)

    def assign(self, n, x):
        return _libspot.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _libspot.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _libspot.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _libspot.DoubleVector_reserve(self, n)

    def capacity(self):
        return _libspot.DoubleVector_capacity(self)
    __swig_destroy__ = _libspot.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _libspot.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class BoundsVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoundsVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoundsVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libspot.BoundsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libspot.BoundsVector___nonzero__(self)

    def __bool__(self):
        return _libspot.BoundsVector___bool__(self)

    def __len__(self):
        return _libspot.BoundsVector___len__(self)

    def __getslice__(self, i, j):
        return _libspot.BoundsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libspot.BoundsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libspot.BoundsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libspot.BoundsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libspot.BoundsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libspot.BoundsVector___setitem__(self, *args)

    def pop(self):
        return _libspot.BoundsVector_pop(self)

    def append(self, x):
        return _libspot.BoundsVector_append(self, x)

    def empty(self):
        return _libspot.BoundsVector_empty(self)

    def size(self):
        return _libspot.BoundsVector_size(self)

    def swap(self, v):
        return _libspot.BoundsVector_swap(self, v)

    def begin(self):
        return _libspot.BoundsVector_begin(self)

    def end(self):
        return _libspot.BoundsVector_end(self)

    def rbegin(self):
        return _libspot.BoundsVector_rbegin(self)

    def rend(self):
        return _libspot.BoundsVector_rend(self)

    def clear(self):
        return _libspot.BoundsVector_clear(self)

    def get_allocator(self):
        return _libspot.BoundsVector_get_allocator(self)

    def pop_back(self):
        return _libspot.BoundsVector_pop_back(self)

    def erase(self, *args):
        return _libspot.BoundsVector_erase(self, *args)

    def __init__(self, *args):
        this = _libspot.new_BoundsVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _libspot.BoundsVector_push_back(self, x)

    def front(self):
        return _libspot.BoundsVector_front(self)

    def back(self):
        return _libspot.BoundsVector_back(self)

    def assign(self, n, x):
        return _libspot.BoundsVector_assign(self, n, x)

    def resize(self, *args):
        return _libspot.BoundsVector_resize(self, *args)

    def insert(self, *args):
        return _libspot.BoundsVector_insert(self, *args)

    def reserve(self, n):
        return _libspot.BoundsVector_reserve(self, n)

    def capacity(self):
        return _libspot.BoundsVector_capacity(self)
    __swig_destroy__ = _libspot.delete_BoundsVector
    __del__ = lambda self: None
BoundsVector_swigregister = _libspot.BoundsVector_swigregister
BoundsVector_swigregister(BoundsVector)

class DSpotVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSpotVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DSpotVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libspot.DSpotVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libspot.DSpotVector___nonzero__(self)

    def __bool__(self):
        return _libspot.DSpotVector___bool__(self)

    def __len__(self):
        return _libspot.DSpotVector___len__(self)

    def __getslice__(self, i, j):
        return _libspot.DSpotVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libspot.DSpotVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libspot.DSpotVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libspot.DSpotVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libspot.DSpotVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libspot.DSpotVector___setitem__(self, *args)

    def pop(self):
        return _libspot.DSpotVector_pop(self)

    def append(self, x):
        return _libspot.DSpotVector_append(self, x)

    def empty(self):
        return _libspot.DSpotVector_empty(self)

    def size(self):
        return _libspot.DSpotVector_size(self)

    def swap(self, v):
        return _libspot.DSpotVector_swap(self, v)

    def begin(self):
        return _libspot.DSpotVector_begin(self)

    def end(self):
        return _libspot.DSpotVector_end(self)

    def rbegin(self):
        return _libspot.DSpotVector_rbegin(self)

    def rend(self):
        return _libspot.DSpotVector_rend(self)

    def clear(self):
        return _libspot.DSpotVector_clear(self)

    def get_allocator(self):
        return _libspot.DSpotVector_get_allocator(self)

    def pop_back(self):
        return _libspot.DSpotVector_pop_back(self)

    def erase(self, *args):
        return _libspot.DSpotVector_erase(self, *args)

    def __init__(self, *args):
        this = _libspot.new_DSpotVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _libspot.DSpotVector_push_back(self, x)

    def front(self):
        return _libspot.DSpotVector_front(self)

    def back(self):
        return _libspot.DSpotVector_back(self)

    def assign(self, n, x):
        return _libspot.DSpotVector_assign(self, n, x)

    def resize(self, *args):
        return _libspot.DSpotVector_resize(self, *args)

    def insert(self, *args):
        return _libspot.DSpotVector_insert(self, *args)

    def reserve(self, n):
        return _libspot.DSpotVector_reserve(self, n)

    def capacity(self):
        return _libspot.DSpotVector_capacity(self)
    __swig_destroy__ = _libspot.delete_DSpotVector
    __del__ = lambda self: None
DSpotVector_swigregister = _libspot.DSpotVector_swigregister
DSpotVector_swigregister(DSpotVector)

class Ubend(DoubleVector):
    __swig_setmethods__ = {}
    for _s in [DoubleVector]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ubend, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleVector]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Ubend, name)
    __repr__ = _swig_repr

    def __init__(self, N=-1):
        this = _libspot.new_Ubend(N)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def merge(self, U):
        return _libspot.Ubend_merge(self, U)

    def getCursor(self):
        return _libspot.Ubend_getCursor(self)

    def getLastErasedData(self):
        return _libspot.Ubend_getLastErasedData(self)

    def push(self, x):
        return _libspot.Ubend_push(self, x)

    def getCapacity(self):
        return _libspot.Ubend_getCapacity(self)

    def isFilled(self):
        return _libspot.Ubend_isFilled(self)
    __swig_destroy__ = _libspot.delete_Ubend
    __del__ = lambda self: None
Ubend_swigregister = _libspot.Ubend_swigregister
Ubend_swigregister(Ubend)

class StreamStats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamStats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StreamStats, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libspot.new_StreamStats(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def merge(self, S):
        return _libspot.StreamStats_merge(self, S)

    def get_s_star(self):
        return _libspot.StreamStats_get_s_star(self)

    def size(self):
        return _libspot.StreamStats_size(self)

    def B2(self):
        return _libspot.StreamStats_B2(self)

    def H2(self):
        return _libspot.StreamStats_H2(self)

    def step(self, x):
        return _libspot.StreamStats_step(self, x)

    def __lt__(self, other):
        return _libspot.StreamStats___lt__(self, other)

    def dump(self):
        return _libspot.StreamStats_dump(self)

    def stringStatus(self):
        return _libspot.StreamStats_stringStatus(self)
    __swig_destroy__ = _libspot.delete_StreamStats
    __del__ = lambda self: None
StreamStats_swigregister = _libspot.StreamStats_swigregister
StreamStats_swigregister(StreamStats)

class Bounds(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bounds, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Bounds, name)
    __repr__ = _swig_repr
    __swig_setmethods__["down"] = _libspot.Bounds_down_set
    __swig_getmethods__["down"] = _libspot.Bounds_down_get
    if _newclass:
        down = _swig_property(_libspot.Bounds_down_get, _libspot.Bounds_down_set)
    __swig_setmethods__["up"] = _libspot.Bounds_up_set
    __swig_getmethods__["up"] = _libspot.Bounds_up_get
    if _newclass:
        up = _swig_property(_libspot.Bounds_up_get, _libspot.Bounds_up_set)
    __swig_destroy__ = _libspot.delete_Bounds
    __del__ = lambda self: None

    def __init__(self, d=0.0, u=0.0):
        this = _libspot.new_Bounds(d, u)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def distanceTo(self, x):
        return _libspot.Bounds_distanceTo(self, x)

    def contains(self, x):
        return _libspot.Bounds_contains(self, x)

    def __lt__(self, other):
        return _libspot.Bounds___lt__(self, other)

    def __gt__(self, other):
        return _libspot.Bounds___gt__(self, other)
Bounds_swigregister = _libspot.Bounds_swigregister
Bounds_swigregister(Bounds)

class BrentResults(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BrentResults, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BrentResults, name)
    __repr__ = _swig_repr
    __swig_setmethods__["xmin"] = _libspot.BrentResults_xmin_set
    __swig_getmethods__["xmin"] = _libspot.BrentResults_xmin_get
    if _newclass:
        xmin = _swig_property(_libspot.BrentResults_xmin_get, _libspot.BrentResults_xmin_set)
    __swig_setmethods__["fmin"] = _libspot.BrentResults_fmin_set
    __swig_getmethods__["fmin"] = _libspot.BrentResults_fmin_get
    if _newclass:
        fmin = _swig_property(_libspot.BrentResults_fmin_get, _libspot.BrentResults_fmin_set)

    def __init__(self):
        this = _libspot.new_BrentResults()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libspot.delete_BrentResults
    __del__ = lambda self: None
BrentResults_swigregister = _libspot.BrentResults_swigregister
BrentResults_swigregister(BrentResults)


def brent(found, a, b, f, epsilon=1e-6, delta=1e-8):
    return _libspot.brent(found, a, b, f, epsilon, delta)
brent = _libspot.brent

def brent2(found, a, b, f, epsilon=1e-6, delta=1e-8):
    return _libspot.brent2(found, a, b, f, epsilon, delta)
brent2 = _libspot.brent2
class GPDinfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GPDinfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GPDinfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["gamma"] = _libspot.GPDinfo_gamma_set
    __swig_getmethods__["gamma"] = _libspot.GPDinfo_gamma_get
    if _newclass:
        gamma = _swig_property(_libspot.GPDinfo_gamma_get, _libspot.GPDinfo_gamma_set)
    __swig_setmethods__["sigma"] = _libspot.GPDinfo_sigma_set
    __swig_getmethods__["sigma"] = _libspot.GPDinfo_sigma_get
    if _newclass:
        sigma = _swig_property(_libspot.GPDinfo_sigma_get, _libspot.GPDinfo_sigma_set)
    __swig_setmethods__["llhood"] = _libspot.GPDinfo_llhood_set
    __swig_getmethods__["llhood"] = _libspot.GPDinfo_llhood_get
    if _newclass:
        llhood = _swig_property(_libspot.GPDinfo_llhood_get, _libspot.GPDinfo_llhood_set)

    def __init__(self):
        this = _libspot.new_GPDinfo()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libspot.delete_GPDinfo
    __del__ = lambda self: None
GPDinfo_swigregister = _libspot.GPDinfo_swigregister
GPDinfo_swigregister(GPDinfo)

class GPDfit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GPDfit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GPDfit, name)
    __repr__ = _swig_repr

    def __init__(self, capacity=-1):
        this = _libspot.new_GPDfit(capacity)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def size(self):
        return _libspot.GPDfit_size(self)

    def min(self):
        return _libspot.GPDfit_min(self)

    def max(self):
        return _libspot.GPDfit_max(self)

    def mean(self):
        return _libspot.GPDfit_mean(self)

    def push(self, v):
        return _libspot.GPDfit_push(self, v)

    def grimshaw_w(self, x):
        return _libspot.GPDfit_grimshaw_w(self, x)

    def fit(self):
        return _libspot.GPDfit_fit(self)
    __swig_destroy__ = _libspot.delete_GPDfit
    __del__ = lambda self: None
GPDfit_swigregister = _libspot.GPDfit_swigregister
GPDfit_swigregister(GPDfit)

class SpotInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpotInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SpotInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["info"] = _libspot.SpotInfo_info_set
    __swig_getmethods__["info"] = _libspot.SpotInfo_info_get
    if _newclass:
        info = _swig_property(_libspot.SpotInfo_info_get, _libspot.SpotInfo_info_set)
    __swig_setmethods__["z"] = _libspot.SpotInfo_z_set
    __swig_getmethods__["z"] = _libspot.SpotInfo_z_get
    if _newclass:
        z = _swig_property(_libspot.SpotInfo_z_get, _libspot.SpotInfo_z_set)
    __swig_setmethods__["Nt"] = _libspot.SpotInfo_Nt_set
    __swig_getmethods__["Nt"] = _libspot.SpotInfo_Nt_get
    if _newclass:
        Nt = _swig_property(_libspot.SpotInfo_Nt_get, _libspot.SpotInfo_Nt_set)

    def __init__(self):
        this = _libspot.new_SpotInfo()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libspot.delete_SpotInfo
    __del__ = lambda self: None
SpotInfo_swigregister = _libspot.SpotInfo_swigregister
SpotInfo_swigregister(SpotInfo)

class SpotStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpotStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SpotStatus, name)
    __repr__ = _swig_repr
    __swig_setmethods__["n"] = _libspot.SpotStatus_n_set
    __swig_getmethods__["n"] = _libspot.SpotStatus_n_get
    if _newclass:
        n = _swig_property(_libspot.SpotStatus_n_get, _libspot.SpotStatus_n_set)
    __swig_setmethods__["Nt_up"] = _libspot.SpotStatus_Nt_up_set
    __swig_getmethods__["Nt_up"] = _libspot.SpotStatus_Nt_up_get
    if _newclass:
        Nt_up = _swig_property(_libspot.SpotStatus_Nt_up_get, _libspot.SpotStatus_Nt_up_set)
    __swig_setmethods__["Nt_down"] = _libspot.SpotStatus_Nt_down_set
    __swig_getmethods__["Nt_down"] = _libspot.SpotStatus_Nt_down_get
    if _newclass:
        Nt_down = _swig_property(_libspot.SpotStatus_Nt_down_get, _libspot.SpotStatus_Nt_down_set)
    __swig_setmethods__["ex_up"] = _libspot.SpotStatus_ex_up_set
    __swig_getmethods__["ex_up"] = _libspot.SpotStatus_ex_up_get
    if _newclass:
        ex_up = _swig_property(_libspot.SpotStatus_ex_up_get, _libspot.SpotStatus_ex_up_set)
    __swig_setmethods__["ex_down"] = _libspot.SpotStatus_ex_down_set
    __swig_getmethods__["ex_down"] = _libspot.SpotStatus_ex_down_get
    if _newclass:
        ex_down = _swig_property(_libspot.SpotStatus_ex_down_get, _libspot.SpotStatus_ex_down_set)
    __swig_setmethods__["al_up"] = _libspot.SpotStatus_al_up_set
    __swig_getmethods__["al_up"] = _libspot.SpotStatus_al_up_get
    if _newclass:
        al_up = _swig_property(_libspot.SpotStatus_al_up_get, _libspot.SpotStatus_al_up_set)
    __swig_setmethods__["al_down"] = _libspot.SpotStatus_al_down_set
    __swig_getmethods__["al_down"] = _libspot.SpotStatus_al_down_get
    if _newclass:
        al_down = _swig_property(_libspot.SpotStatus_al_down_get, _libspot.SpotStatus_al_down_set)
    __swig_setmethods__["t_up"] = _libspot.SpotStatus_t_up_set
    __swig_getmethods__["t_up"] = _libspot.SpotStatus_t_up_get
    if _newclass:
        t_up = _swig_property(_libspot.SpotStatus_t_up_get, _libspot.SpotStatus_t_up_set)
    __swig_setmethods__["t_down"] = _libspot.SpotStatus_t_down_set
    __swig_getmethods__["t_down"] = _libspot.SpotStatus_t_down_get
    if _newclass:
        t_down = _swig_property(_libspot.SpotStatus_t_down_get, _libspot.SpotStatus_t_down_set)
    __swig_setmethods__["z_up"] = _libspot.SpotStatus_z_up_set
    __swig_getmethods__["z_up"] = _libspot.SpotStatus_z_up_get
    if _newclass:
        z_up = _swig_property(_libspot.SpotStatus_z_up_get, _libspot.SpotStatus_z_up_set)
    __swig_setmethods__["z_down"] = _libspot.SpotStatus_z_down_set
    __swig_getmethods__["z_down"] = _libspot.SpotStatus_z_down_get
    if _newclass:
        z_down = _swig_property(_libspot.SpotStatus_z_down_get, _libspot.SpotStatus_z_down_set)

    def str(self):
        return _libspot.SpotStatus_str(self)

    def __init__(self):
        this = _libspot.new_SpotStatus()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libspot.delete_SpotStatus
    __del__ = lambda self: None
SpotStatus_swigregister = _libspot.SpotStatus_swigregister
SpotStatus_swigregister(SpotStatus)

class SpotConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpotConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SpotConfig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["q"] = _libspot.SpotConfig_q_set
    __swig_getmethods__["q"] = _libspot.SpotConfig_q_get
    if _newclass:
        q = _swig_property(_libspot.SpotConfig_q_get, _libspot.SpotConfig_q_set)
    __swig_setmethods__["bounded"] = _libspot.SpotConfig_bounded_set
    __swig_getmethods__["bounded"] = _libspot.SpotConfig_bounded_get
    if _newclass:
        bounded = _swig_property(_libspot.SpotConfig_bounded_get, _libspot.SpotConfig_bounded_set)
    __swig_setmethods__["max_excess"] = _libspot.SpotConfig_max_excess_set
    __swig_getmethods__["max_excess"] = _libspot.SpotConfig_max_excess_get
    if _newclass:
        max_excess = _swig_property(_libspot.SpotConfig_max_excess_get, _libspot.SpotConfig_max_excess_set)
    __swig_setmethods__["alert"] = _libspot.SpotConfig_alert_set
    __swig_getmethods__["alert"] = _libspot.SpotConfig_alert_get
    if _newclass:
        alert = _swig_property(_libspot.SpotConfig_alert_get, _libspot.SpotConfig_alert_set)
    __swig_setmethods__["up"] = _libspot.SpotConfig_up_set
    __swig_getmethods__["up"] = _libspot.SpotConfig_up_get
    if _newclass:
        up = _swig_property(_libspot.SpotConfig_up_get, _libspot.SpotConfig_up_set)
    __swig_setmethods__["down"] = _libspot.SpotConfig_down_set
    __swig_getmethods__["down"] = _libspot.SpotConfig_down_get
    if _newclass:
        down = _swig_property(_libspot.SpotConfig_down_get, _libspot.SpotConfig_down_set)
    __swig_setmethods__["n_init"] = _libspot.SpotConfig_n_init_set
    __swig_getmethods__["n_init"] = _libspot.SpotConfig_n_init_get
    if _newclass:
        n_init = _swig_property(_libspot.SpotConfig_n_init_get, _libspot.SpotConfig_n_init_set)
    __swig_setmethods__["level"] = _libspot.SpotConfig_level_set
    __swig_getmethods__["level"] = _libspot.SpotConfig_level_get
    if _newclass:
        level = _swig_property(_libspot.SpotConfig_level_get, _libspot.SpotConfig_level_set)

    def str(self):
        return _libspot.SpotConfig_str(self)

    def __init__(self):
        this = _libspot.new_SpotConfig()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libspot.delete_SpotConfig
    __del__ = lambda self: None
SpotConfig_swigregister = _libspot.SpotConfig_swigregister
SpotConfig_swigregister(SpotConfig)

class Spot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Spot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Spot, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libspot.new_Spot(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __eq__(self, spot):
        return _libspot.Spot___eq__(self, spot)

    def __add__(self, spot):
        return _libspot.Spot___add__(self, spot)

    def step(self, v):
        return _libspot.Spot_step(self, v)

    def calibrate(self):
        return _libspot.Spot_calibrate(self)

    def status(self):
        return _libspot.Spot_status(self)

    def stringStatus(self):
        return _libspot.Spot_stringStatus(self)

    def config(self):
        return _libspot.Spot_config(self)

    def getUpperThreshold(self):
        return _libspot.Spot_getUpperThreshold(self)

    def getLowerThreshold(self):
        return _libspot.Spot_getLowerThreshold(self)

    def getThresholds(self):
        return _libspot.Spot_getThresholds(self)

    def getUpper_t(self):
        return _libspot.Spot_getUpper_t(self)

    def getLower_t(self):
        return _libspot.Spot_getLower_t(self)
    __swig_destroy__ = _libspot.delete_Spot
    __del__ = lambda self: None
Spot_swigregister = _libspot.Spot_swigregister
Spot_swigregister(Spot)

class DSpot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DSpot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DSpot, name)
    __repr__ = _swig_repr

    def __init__(self, ds):
        this = _libspot.new_DSpot(ds)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __eq__(self, other):
        return _libspot.DSpot___eq__(self, other)

    def __lt__(self, other):
        return _libspot.DSpot___lt__(self, other)

    def step(self, x):
        return _libspot.DSpot_step(self, x)

    def getUpperThreshold(self):
        return _libspot.DSpot_getUpperThreshold(self)

    def getLowerThreshold(self):
        return _libspot.DSpot_getLowerThreshold(self)

    def getThresholds(self):
        return _libspot.DSpot_getThresholds(self)

    def getDrift(self):
        return _libspot.DSpot_getDrift(self)

    def status(self):
        return _libspot.DSpot_status(self)

    def stringStatus(self):
        return _libspot.DSpot_stringStatus(self)
    __swig_destroy__ = _libspot.delete_DSpot
    __del__ = lambda self: None
DSpot_swigregister = _libspot.DSpot_swigregister
DSpot_swigregister(DSpot)

# This file is compatible with both classic and new-style classes.


