<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="class_bounds" kind="class" language="C++" prot="public">
    <compoundname>Bounds</compoundname>
    <includes refid="bounds_8h" local="no">bounds.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="class_bounds_1a93bd6fed89b04cfba7449bd202344438" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double Bounds::down</definition>
        <argsstring></argsstring>
        <name>down</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>lower threshold </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/asr/Documents/Work/github/libspot/master/include/bounds.h" line="23" column="1" bodyfile="/home/asr/Documents/Work/github/libspot/master/include/bounds.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_bounds_1adbfd113d9ce8e0fa1737648c8e603015" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double Bounds::up</definition>
        <argsstring></argsstring>
        <name>up</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>upper threshold </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/asr/Documents/Work/github/libspot/master/include/bounds.h" line="24" column="1" bodyfile="/home/asr/Documents/Work/github/libspot/master/include/bounds.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_bounds_1a63daacb83dd0f6768075dd51d9c0a37c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Bounds::Bounds</definition>
        <argsstring>(double d=0.0, double u=0.0)</argsstring>
        <name>Bounds</name>
        <param>
          <type>double</type>
          <declname>d</declname>
          <defval>0.0</defval>
        </param>
        <param>
          <type>double</type>
          <declname>u</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
<para>Basic constructor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">d</parametername>
</parameternamelist>
<parameterdescription>
<para>the value of the lower bounds </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">u</parametername>
</parameternamelist>
<parameterdescription>
<para>the value of the upper bounds </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="class_g_p_dfit" kindref="compound">GPDfit</ref> object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/asr/Documents/Work/github/libspot/master/include/bounds.h" line="32" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bounds_1a29b0515fde7a09a244fd04a320261895" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Bounds::distanceTo</definition>
        <argsstring>(double x)</argsstring>
        <name>distanceTo</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Compute the distance between a value x and the interval [down,up]. </para>        </briefdescription>
        <detaileddescription>
<para>If x belongs to [down,up], it returns 0. Otherwises it returns d(x) = min(|x-down|,|x-up|) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>a value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the distance d(x) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/asr/Documents/Work/github/libspot/master/include/bounds.h" line="40" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bounds_1a53a06997ada0cac9aaa55f08d74c059b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Bounds::contains</definition>
        <argsstring>(double x)</argsstring>
        <name>contains</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Check if a value x belongs to the interval [down,up]. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>x belongs to the interval [down,up] </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>x does not belong to the interval [down,up] </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/asr/Documents/Work/github/libspot/master/include/bounds.h" line="47" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bounds_1a880deb0027e57f57b894c72a860cf92f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Bounds::operator&lt;</definition>
        <argsstring>(Bounds const &amp;other) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type><ref refid="class_bounds" kindref="compound">Bounds</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compare this-&gt;up and other.down. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>if this-&gt;up &lt; other.down </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>otherwise </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/asr/Documents/Work/github/libspot/master/include/bounds.h" line="54" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bounds_1acda126989164abc7410762c005a311dc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Bounds::operator&gt;</definition>
        <argsstring>(Bounds const &amp;other) const</argsstring>
        <name>operator&gt;</name>
        <param>
          <type><ref refid="class_bounds" kindref="compound">Bounds</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compare this-&gt;down and other.up. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>if this-&gt;down &gt; other.up </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>otherwise </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/asr/Documents/Work/github/libspot/master/include/bounds.h" line="61" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A structure which embeds upper and lower thresholds. </para>    </briefdescription>
    <detaileddescription>
<para>Some basic methods are also implemented </para>    </detaileddescription>
    <location file="/home/asr/Documents/Work/github/libspot/master/include/bounds.h" line="21" column="1" bodyfile="/home/asr/Documents/Work/github/libspot/master/include/bounds.h" bodystart="21" bodyend="63"/>
    <listofallmembers>
      <member refid="class_bounds_1a63daacb83dd0f6768075dd51d9c0a37c" prot="public" virt="non-virtual"><scope>Bounds</scope><name>Bounds</name></member>
      <member refid="class_bounds_1a53a06997ada0cac9aaa55f08d74c059b" prot="public" virt="non-virtual"><scope>Bounds</scope><name>contains</name></member>
      <member refid="class_bounds_1a29b0515fde7a09a244fd04a320261895" prot="public" virt="non-virtual"><scope>Bounds</scope><name>distanceTo</name></member>
      <member refid="class_bounds_1a93bd6fed89b04cfba7449bd202344438" prot="public" virt="non-virtual"><scope>Bounds</scope><name>down</name></member>
      <member refid="class_bounds_1a880deb0027e57f57b894c72a860cf92f" prot="public" virt="non-virtual"><scope>Bounds</scope><name>operator&lt;</name></member>
      <member refid="class_bounds_1acda126989164abc7410762c005a311dc" prot="public" virt="non-virtual"><scope>Bounds</scope><name>operator&gt;</name></member>
      <member refid="class_bounds_1adbfd113d9ce8e0fa1737648c8e603015" prot="public" virt="non-virtual"><scope>Bounds</scope><name>up</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
