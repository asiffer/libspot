<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="class_spot" kind="class" language="C++" prot="public">
    <compoundname>Spot</compoundname>
    <derivedcompoundref refid="class_d_spot" prot="public" virt="non-virtual">DSpot</derivedcompoundref>
    <includes refid="spot_8h" local="no">spot.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_spot_1a2d892f6aacda5f12bbac38d898f081be" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double Spot::q</definition>
        <argsstring></argsstring>
        <name>q</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>the main parameter ( P(X&gt;z_q) &lt; q ) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/spot.h" line="141" column="1" bodyfile="include/spot.h" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_spot_1ab50a7aa6de09a3774c9c41de7825b685" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Spot::bounded</definition>
        <argsstring></argsstring>
        <name>bounded</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>if true, the number of stored will be bounded by max_excess </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/spot.h" line="144" column="1" bodyfile="include/spot.h" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_spot_1aeee3f83b725c5356325af55a9157ee8a" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int Spot::max_excess</definition>
        <argsstring></argsstring>
        <name>max_excess</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximum number of stored excesses (bounded mode) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/spot.h" line="147" column="1" bodyfile="include/spot.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_spot_1a76101429c1e291171b81cb5844407e20" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Spot::alert</definition>
        <argsstring></argsstring>
        <name>alert</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>if true, the algorithm triggers alarms (the outlier is not taking into account in the model) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/spot.h" line="150" column="1" bodyfile="include/spot.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_spot_1a1bf1515b0922c88a4b28715d8702fb85" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Spot::up</definition>
        <argsstring></argsstring>
        <name>up</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>if true, compute upper threshold </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/spot.h" line="153" column="1" bodyfile="include/spot.h" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_spot_1ab72120f32002ab2c9ddf010bba49b9ed" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Spot::down</definition>
        <argsstring></argsstring>
        <name>down</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>if true, compute lower threshold </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/spot.h" line="156" column="1" bodyfile="include/spot.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_spot_1a33b25257619ba047f2f9ec7435a18708" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int Spot::n_init</definition>
        <argsstring></argsstring>
        <name>n_init</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>number of observation to perform calibration </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/spot.h" line="159" column="1" bodyfile="include/spot.h" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_spot_1a194a7efe5da7c5d5d0e4bc8447f98ca5" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double Spot::level</definition>
        <argsstring></argsstring>
        <name>level</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>level of the update threshold (0&lt;l&lt;1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/spot.h" line="162" column="1" bodyfile="include/spot.h" bodystart="162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_spot_1a4bf16ea24b5075f495804cd1df275490" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int Spot::n</definition>
        <argsstring></argsstring>
        <name>n</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of normal observations (not the alarms) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/spot.h" line="167" column="1" bodyfile="include/spot.h" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_spot_1a988361ccafb438ad4a0bdde5c0d7ead6" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int Spot::Nt_up</definition>
        <argsstring></argsstring>
        <name>Nt_up</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of up excesses </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/spot.h" line="170" column="1" bodyfile="include/spot.h" bodystart="170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_spot_1aaa8b824d16c4ae08fffd16ba2ae744b8" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int Spot::Nt_down</definition>
        <argsstring></argsstring>
        <name>Nt_down</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of down excesses </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/spot.h" line="172" column="1" bodyfile="include/spot.h" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_spot_1a50e56c8fcf35e3b98ae6b7e84dbb5bf9" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int Spot::al_up</definition>
        <argsstring></argsstring>
        <name>al_up</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of up alarms </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/spot.h" line="175" column="1" bodyfile="include/spot.h" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_spot_1ae6139cf212ca89128d772a69440784c9" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int Spot::al_down</definition>
        <argsstring></argsstring>
        <name>al_down</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of down alarms </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/spot.h" line="177" column="1" bodyfile="include/spot.h" bodystart="177" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_spot_1a201aad21506428e8b77181c569590c89" prot="protected" static="no" mutable="no">
        <type>vector&lt; double &gt;</type>
        <definition>vector&lt;double&gt; Spot::init_batch</definition>
        <argsstring></argsstring>
        <name>init_batch</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>initial batch (for calibration) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/spot.h" line="180" column="1" bodyfile="include/spot.h" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_spot_1a1a77b818c89dcf1596d4ce78e8cba986" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double Spot::t_up</definition>
        <argsstring></argsstring>
        <name>t_up</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>transitional up threshold </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/spot.h" line="183" column="1" bodyfile="include/spot.h" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_spot_1a0ee115c2b0a0ffa650d26cab8608ca73" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double Spot::t_down</definition>
        <argsstring></argsstring>
        <name>t_down</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>transitional down threshold </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/spot.h" line="185" column="1" bodyfile="include/spot.h" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_spot_1ae5283f4238abff9fe19ef902256f041f" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double Spot::z_up</definition>
        <argsstring></argsstring>
        <name>z_up</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>up alert thresholds </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/spot.h" line="188" column="1" bodyfile="include/spot.h" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_spot_1aca10a8cb4409935af0154e78e9ee47ff" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double Spot::z_down</definition>
        <argsstring></argsstring>
        <name>z_down</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>down alert thresholds </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/spot.h" line="190" column="1" bodyfile="include/spot.h" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_spot_1a256d07450f2a03f75d5207216f95628e" prot="protected" static="no" mutable="no">
        <type><ref refid="class_g_p_dfit" kindref="compound">GPDfit</ref></type>
        <definition>GPDfit Spot::upper_bound</definition>
        <argsstring></argsstring>
        <name>upper_bound</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Object to compute the upper threshold </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/spot.h" line="193" column="1" bodyfile="include/spot.h" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_spot_1a2729436f8049869b303f5b01c09cbf48" prot="protected" static="no" mutable="no">
        <type><ref refid="class_g_p_dfit" kindref="compound">GPDfit</ref></type>
        <definition>GPDfit Spot::lower_bound</definition>
        <argsstring></argsstring>
        <name>lower_bound</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Object to compute the lower threshold </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/spot.h" line="195" column="1" bodyfile="include/spot.h" bodystart="195" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_spot_1ab2ee61794881d4faa87b7a9422b68e3d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Spot::fitup</definition>
        <argsstring>()</argsstring>
        <name>fitup</name>
        <briefdescription>
<para>GPD fit for the upper bound (update upper threshold) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/spot.h" line="204" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_spot_1ac1684b552b97b216831fa8a018606c59" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Spot::fitdown</definition>
        <argsstring>()</argsstring>
        <name>fitdown</name>
        <briefdescription>
<para>GPD fit for the lower bound (update upper threshold) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/spot.h" line="209" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_spot_1a9c1d78ca2465737a3e5480ce76095cee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Spot::Spot</definition>
        <argsstring>(double q=1e-3, int n_init=1000)</argsstring>
        <name>Spot</name>
        <param>
          <type>double</type>
          <declname>q</declname>
          <defval>1e-3</defval>
        </param>
        <param>
          <type>int</type>
          <declname>n_init</declname>
          <defval>1000</defval>
        </param>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">q</parametername>
</parameternamelist>
<parameterdescription>
<para>Probability of abnormal events </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">n_init</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of initial batch to perform calibration </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="class_spot" kindref="compound">Spot</ref> object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/spot.h" line="222" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_spot_1a769b3886ecef1c4edaa819146cf45cd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Spot::Spot</definition>
        <argsstring>(double q, vector&lt; double &gt; init_data)</argsstring>
        <name>Spot</name>
        <param>
          <type>double</type>
          <declname>q</declname>
        </param>
        <param>
          <type>vector&lt; double &gt;</type>
          <declname>init_data</declname>
        </param>
        <briefdescription>
<para>Constructor with risk parametrization (q) and initial batch. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">q</parametername>
</parameternamelist>
<parameterdescription>
<para>Probability of abnormal events </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">init_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial batch to perform calibration </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="class_spot" kindref="compound">Spot</ref> object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/spot.h" line="230" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_spot_1a78251b9f558dd4679d5d39bccbe2c5f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Spot::Spot</definition>
        <argsstring>(double q, int n_init, double level, bool up, bool down, bool alert, bool bounded, int max_excess)</argsstring>
        <name>Spot</name>
        <param>
          <type>double</type>
          <declname>q</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_init</declname>
        </param>
        <param>
          <type>double</type>
          <declname>level</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>up</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>down</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>alert</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bounded</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max_excess</declname>
        </param>
        <briefdescription>
<para>Full parametrizable constructor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">q</parametername>
</parameternamelist>
<parameterdescription>
<para>Probability of abnormal events </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">n_init</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of initial observations to perform calibration </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">level</parametername>
</parameternamelist>
<parameterdescription>
<para>Quantile level to discriminate the excesses from the normal data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">up</parametername>
</parameternamelist>
<parameterdescription>
<para>Compute upper threshold </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">down</parametername>
</parameternamelist>
<parameterdescription>
<para>Compute lower threshold </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">alert</parametername>
</parameternamelist>
<parameterdescription>
<para>Trigger alert </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bounded</parametername>
</parameternamelist>
<parameterdescription>
<para>Bounded mode </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">max_excess</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of storable excesses (for bounded mode) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="class_spot" kindref="compound">Spot</ref> object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/spot.h" line="244" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_spot_1a3ef94b50934e298b396433c50aae84fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Spot::Spot</definition>
        <argsstring>(double q, vector&lt; double &gt; init_data, double level, bool up, bool down, bool alert, bool bounded, int max_excess)</argsstring>
        <name>Spot</name>
        <param>
          <type>double</type>
          <declname>q</declname>
        </param>
        <param>
          <type>vector&lt; double &gt;</type>
          <declname>init_data</declname>
        </param>
        <param>
          <type>double</type>
          <declname>level</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>up</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>down</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>alert</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bounded</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max_excess</declname>
        </param>
        <briefdescription>
<para>Full parametrizable constructor with initial batch. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">q</parametername>
</parameternamelist>
<parameterdescription>
<para>Probability of abnormal events </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">init_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial batch to perform calibration </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">level</parametername>
</parameternamelist>
<parameterdescription>
<para>Quantile level to discriminate the excesses from the normal data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">up</parametername>
</parameternamelist>
<parameterdescription>
<para>Compute upper threshold </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">down</parametername>
</parameternamelist>
<parameterdescription>
<para>Compute lower threshold </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">alert</parametername>
</parameternamelist>
<parameterdescription>
<para>Trigger alert </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bounded</parametername>
</parameternamelist>
<parameterdescription>
<para>Bounded mode </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">max_excess</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of storable excesses (for bounded mode) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="class_spot" kindref="compound">Spot</ref> object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/spot.h" line="260" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_spot_1ae7c88c27e7044d4aa78f5c32db651f24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Spot::Spot</definition>
        <argsstring>(SpotConfig conf)</argsstring>
        <name>Spot</name>
        <param>
          <type><ref refid="class_spot_config" kindref="compound">SpotConfig</ref></type>
          <declname>conf</declname>
        </param>
        <briefdescription>
<para>create a <ref refid="class_spot" kindref="compound">Spot</ref> object according to the configuration </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">conf</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="class_spot_config" kindref="compound">SpotConfig</ref> object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="class_spot" kindref="compound">Spot</ref> object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/spot.h" line="269" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_spot_1a1da0219dbf03892e9d14274f1fa297e2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Spot::operator==</definition>
        <argsstring>(const Spot &amp;spot) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_spot" kindref="compound">Spot</ref> &amp;</type>
          <declname>spot</declname>
        </param>
        <briefdescription>
<para><ref refid="class_spot" kindref="compound">Spot</ref> configuration comparison. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">spot</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_spot" kindref="compound">Spot</ref> instance </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>both instances have the same configuration </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>instances have not the same configuration </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/spot.h" line="277" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_spot_1a2fb5bfd52a8c54ec2356e6bab9f0be1e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_spot" kindref="compound">Spot</ref></type>
        <definition>Spot Spot::operator+</definition>
        <argsstring>(const Spot &amp;spot) const</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="class_spot" kindref="compound">Spot</ref> &amp;</type>
          <declname>spot</declname>
        </param>
        <briefdescription>
<para>Merge 2 <ref refid="class_spot" kindref="compound">Spot</ref> instances. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">spot</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_spot" kindref="compound">Spot</ref> instance </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="class_spot" kindref="compound">Spot</ref></para></simplesect>
Beware of the order. Spot_1 + Spot_2 != Spot_2 + Spot_1. This function takes the lower_bound of Spot_1 and the upper_bound of Spot_2. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/spot.h" line="286" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_spot_1a12cdab21606b41ad211d07ad5bda1dc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="spot_8h_1af3bf0aa2c34c1aef1f8221de0466f17e" kindref="member">SPOTEVENT</ref></type>
        <definition>SPOTEVENT Spot::step</definition>
        <argsstring>(double v)</argsstring>
        <name>step</name>
        <param>
          <type>double</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para><ref refid="class_spot" kindref="compound">Spot</ref> iteration. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">v</parametername>
</parameternamelist>
<parameterdescription>
<para>input data </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The nature of the input data </para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>Normal data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>Up alert </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-1</parametername>
</parameternamelist>
<parameterdescription>
<para>Down alert </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>2</parametername>
</parameternamelist>
<parameterdescription>
<para>Up excess </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-2</parametername>
</parameternamelist>
<parameterdescription>
<para>Down excess </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>3</parametername>
</parameternamelist>
<parameterdescription>
<para>to initial batch </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>4</parametername>
</parameternamelist>
<parameterdescription>
<para>calibration step <ref refid="class_spot" kindref="compound">Spot</ref> iteration </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">v</parametername>
</parameternamelist>
<parameterdescription>
<para>input data </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The nature of the input data </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/spot.h" line="313" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_spot_1a1647c2952c5c6cd9d8d4849b5beda8ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Spot::calibrate</definition>
        <argsstring>()</argsstring>
        <name>calibrate</name>
        <briefdescription>
<para>Perform <ref refid="class_spot" kindref="compound">Spot</ref> initial calibration (after the first n_init observations) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/spot.h" line="319" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_spot_1a365d16355b8af9803bf65a49f7d6b2da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_spot_status" kindref="compound">SpotStatus</ref></type>
        <definition>SpotStatus Spot::status</definition>
        <argsstring>()</argsstring>
        <name>status</name>
        <briefdescription>
<para>Get the internal state of the <ref refid="class_spot" kindref="compound">Spot</ref> instance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/spot.h" line="324" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_spot_1adc3fdba1c574dabd304c29e52332b0e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string Spot::stringStatus</definition>
        <argsstring>()</argsstring>
        <name>stringStatus</name>
        <briefdescription>
<para>Get the internal state of the <ref refid="class_spot" kindref="compound">Spot</ref> instance (display-ready) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/spot.h" line="329" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_spot_1a5619422ed9ba104f2734e70fa1308d40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string Spot::log</definition>
        <argsstring>(int log_level)</argsstring>
        <name>log</name>
        <param>
          <type>int</type>
          <declname>log_level</declname>
        </param>
        <briefdescription>
<para>Return the current state of the <ref refid="class_spot" kindref="compound">Spot</ref> instance through a single line string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">log_level</parametername>
</parameternamelist>
<parameterdescription>
<para>0,1 or 2 according to the desired verbosity </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/spot.h" line="335" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_spot_1a92cc75d19b5f85a004c70d012a30c281" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_spot_config" kindref="compound">SpotConfig</ref></type>
        <definition>SpotConfig Spot::config</definition>
        <argsstring>() const</argsstring>
        <name>config</name>
        <briefdescription>
<para>Return the configuration of the <ref refid="class_spot" kindref="compound">Spot</ref> instance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/spot.h" line="341" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_spot_1a193403ca1f7e6f00a0a1437d111c9fac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Spot::getUpperThreshold</definition>
        <argsstring>()</argsstring>
        <name>getUpperThreshold</name>
        <briefdescription>
<para>Get the current upper threshold. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/spot.h" line="348" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_spot_1a7938cd04a79fe26208a91a9b0a66ec9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Spot::getLowerThreshold</definition>
        <argsstring>()</argsstring>
        <name>getLowerThreshold</name>
        <briefdescription>
<para>Get the current lower threshold. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/spot.h" line="353" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_spot_1a3ea05091194db6bd4cf3fa7af9ddf14d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_bounds" kindref="compound">Bounds</ref></type>
        <definition>Bounds Spot::getThresholds</definition>
        <argsstring>()</argsstring>
        <name>getThresholds</name>
        <briefdescription>
<para>Get the current thresholds (through a <ref refid="class_bounds" kindref="compound">Bounds</ref> structure) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/spot.h" line="358" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_spot_1a94d7dfde5506c2874ca28104f760932b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Spot::getUpper_t</definition>
        <argsstring>()</argsstring>
        <name>getUpper_t</name>
        <briefdescription>
<para>Get the upper excess quantile. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/spot.h" line="363" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_spot_1afe9718f788af6165d7722f554aa1bbb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Spot::getLower_t</definition>
        <argsstring>()</argsstring>
        <name>getLower_t</name>
        <briefdescription>
<para>Get the lower excess quantile. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/spot.h" line="368" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_spot_1a087c2359bd0211c20f76b98bcaf5af17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Spot::set_q</definition>
        <argsstring>(double q_new)</argsstring>
        <name>set_q</name>
        <param>
          <type>double</type>
          <declname>q_new</declname>
        </param>
        <briefdescription>
<para>Set the risk parameter q. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/spot.h" line="373" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_spot_1a63aba545c0dd16504a63c4904ed1d09d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Spot::up_probability</definition>
        <argsstring>(double z)</argsstring>
        <name>up_probability</name>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Give the probability to observe things higher than a value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">z</parametername>
</parameternamelist>
<parameterdescription>
<para>input value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>proability 1-F(z) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/spot.h" line="380" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_spot_1a83d6de0b67cce07d72b9ce963be7757b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Spot::down_probability</definition>
        <argsstring>(double z)</argsstring>
        <name>down_probability</name>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Give the probability to observe things lower than a value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">z</parametername>
</parameternamelist>
<parameterdescription>
<para>input value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>proability F(z) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/spot.h" line="387" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Embed the <ref refid="class_spot" kindref="compound">Spot</ref> algorithm to flag outliers in streaming data. </para>    </briefdescription>
    <detaileddescription>
<para>This object computes probabilistic upper and lower bounds (as desired) according to the incoming data and the main parameter q </para>    </detaileddescription>
    <inheritancegraph>
      <node id="16">
        <label>Spot</label>
        <link refid="class_spot"/>
      </node>
      <node id="17">
        <label>DSpot</label>
        <link refid="class_d_spot"/>
        <childnode refid="16" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="21">
        <label>std::vector&lt; double &gt;</label>
      </node>
      <node id="20">
        <label>Ubend</label>
        <link refid="class_ubend"/>
        <childnode refid="21" relation="public-inheritance">
        </childnode>
      </node>
      <node id="18">
        <label>Spot</label>
        <link refid="class_spot"/>
        <childnode refid="19" relation="usage">
          <edgelabel>upper_bound</edgelabel>
          <edgelabel>lower_bound</edgelabel>
        </childnode>
      </node>
      <node id="19">
        <label>GPDfit</label>
        <link refid="class_g_p_dfit"/>
        <childnode refid="20" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/spot.h" line="135" column="1" bodyfile="include/spot.h" bodystart="134" bodyend="388"/>
    <listofallmembers>
      <member refid="class_spot_1ae6139cf212ca89128d772a69440784c9" prot="protected" virt="non-virtual"><scope>Spot</scope><name>al_down</name></member>
      <member refid="class_spot_1a50e56c8fcf35e3b98ae6b7e84dbb5bf9" prot="protected" virt="non-virtual"><scope>Spot</scope><name>al_up</name></member>
      <member refid="class_spot_1a76101429c1e291171b81cb5844407e20" prot="protected" virt="non-virtual"><scope>Spot</scope><name>alert</name></member>
      <member refid="class_spot_1ab50a7aa6de09a3774c9c41de7825b685" prot="protected" virt="non-virtual"><scope>Spot</scope><name>bounded</name></member>
      <member refid="class_spot_1a1647c2952c5c6cd9d8d4849b5beda8ce" prot="public" virt="non-virtual"><scope>Spot</scope><name>calibrate</name></member>
      <member refid="class_spot_1a92cc75d19b5f85a004c70d012a30c281" prot="public" virt="non-virtual"><scope>Spot</scope><name>config</name></member>
      <member refid="class_spot_1ab72120f32002ab2c9ddf010bba49b9ed" prot="protected" virt="non-virtual"><scope>Spot</scope><name>down</name></member>
      <member refid="class_spot_1a83d6de0b67cce07d72b9ce963be7757b" prot="public" virt="non-virtual"><scope>Spot</scope><name>down_probability</name></member>
      <member refid="class_spot_1ac1684b552b97b216831fa8a018606c59" prot="protected" virt="non-virtual"><scope>Spot</scope><name>fitdown</name></member>
      <member refid="class_spot_1ab2ee61794881d4faa87b7a9422b68e3d" prot="protected" virt="non-virtual"><scope>Spot</scope><name>fitup</name></member>
      <member refid="class_spot_1afe9718f788af6165d7722f554aa1bbb1" prot="public" virt="non-virtual"><scope>Spot</scope><name>getLower_t</name></member>
      <member refid="class_spot_1a7938cd04a79fe26208a91a9b0a66ec9a" prot="public" virt="non-virtual"><scope>Spot</scope><name>getLowerThreshold</name></member>
      <member refid="class_spot_1a3ea05091194db6bd4cf3fa7af9ddf14d" prot="public" virt="non-virtual"><scope>Spot</scope><name>getThresholds</name></member>
      <member refid="class_spot_1a94d7dfde5506c2874ca28104f760932b" prot="public" virt="non-virtual"><scope>Spot</scope><name>getUpper_t</name></member>
      <member refid="class_spot_1a193403ca1f7e6f00a0a1437d111c9fac" prot="public" virt="non-virtual"><scope>Spot</scope><name>getUpperThreshold</name></member>
      <member refid="class_spot_1a201aad21506428e8b77181c569590c89" prot="protected" virt="non-virtual"><scope>Spot</scope><name>init_batch</name></member>
      <member refid="class_spot_1a194a7efe5da7c5d5d0e4bc8447f98ca5" prot="protected" virt="non-virtual"><scope>Spot</scope><name>level</name></member>
      <member refid="class_spot_1a5619422ed9ba104f2734e70fa1308d40" prot="public" virt="non-virtual"><scope>Spot</scope><name>log</name></member>
      <member refid="class_spot_1a2729436f8049869b303f5b01c09cbf48" prot="protected" virt="non-virtual"><scope>Spot</scope><name>lower_bound</name></member>
      <member refid="class_spot_1aeee3f83b725c5356325af55a9157ee8a" prot="protected" virt="non-virtual"><scope>Spot</scope><name>max_excess</name></member>
      <member refid="class_spot_1a4bf16ea24b5075f495804cd1df275490" prot="protected" virt="non-virtual"><scope>Spot</scope><name>n</name></member>
      <member refid="class_spot_1a33b25257619ba047f2f9ec7435a18708" prot="protected" virt="non-virtual"><scope>Spot</scope><name>n_init</name></member>
      <member refid="class_spot_1aaa8b824d16c4ae08fffd16ba2ae744b8" prot="protected" virt="non-virtual"><scope>Spot</scope><name>Nt_down</name></member>
      <member refid="class_spot_1a988361ccafb438ad4a0bdde5c0d7ead6" prot="protected" virt="non-virtual"><scope>Spot</scope><name>Nt_up</name></member>
      <member refid="class_spot_1a2fb5bfd52a8c54ec2356e6bab9f0be1e" prot="public" virt="non-virtual"><scope>Spot</scope><name>operator+</name></member>
      <member refid="class_spot_1a1da0219dbf03892e9d14274f1fa297e2" prot="public" virt="non-virtual"><scope>Spot</scope><name>operator==</name></member>
      <member refid="class_spot_1a2d892f6aacda5f12bbac38d898f081be" prot="protected" virt="non-virtual"><scope>Spot</scope><name>q</name></member>
      <member refid="class_spot_1a087c2359bd0211c20f76b98bcaf5af17" prot="public" virt="non-virtual"><scope>Spot</scope><name>set_q</name></member>
      <member refid="class_spot_1a9c1d78ca2465737a3e5480ce76095cee" prot="public" virt="non-virtual"><scope>Spot</scope><name>Spot</name></member>
      <member refid="class_spot_1a769b3886ecef1c4edaa819146cf45cd5" prot="public" virt="non-virtual"><scope>Spot</scope><name>Spot</name></member>
      <member refid="class_spot_1a78251b9f558dd4679d5d39bccbe2c5f2" prot="public" virt="non-virtual"><scope>Spot</scope><name>Spot</name></member>
      <member refid="class_spot_1a3ef94b50934e298b396433c50aae84fd" prot="public" virt="non-virtual"><scope>Spot</scope><name>Spot</name></member>
      <member refid="class_spot_1ae7c88c27e7044d4aa78f5c32db651f24" prot="public" virt="non-virtual"><scope>Spot</scope><name>Spot</name></member>
      <member refid="class_spot_1a365d16355b8af9803bf65a49f7d6b2da" prot="public" virt="non-virtual"><scope>Spot</scope><name>status</name></member>
      <member refid="class_spot_1a12cdab21606b41ad211d07ad5bda1dc7" prot="public" virt="non-virtual"><scope>Spot</scope><name>step</name></member>
      <member refid="class_spot_1adc3fdba1c574dabd304c29e52332b0e1" prot="public" virt="non-virtual"><scope>Spot</scope><name>stringStatus</name></member>
      <member refid="class_spot_1a0ee115c2b0a0ffa650d26cab8608ca73" prot="protected" virt="non-virtual"><scope>Spot</scope><name>t_down</name></member>
      <member refid="class_spot_1a1a77b818c89dcf1596d4ce78e8cba986" prot="protected" virt="non-virtual"><scope>Spot</scope><name>t_up</name></member>
      <member refid="class_spot_1a1bf1515b0922c88a4b28715d8702fb85" prot="protected" virt="non-virtual"><scope>Spot</scope><name>up</name></member>
      <member refid="class_spot_1a63aba545c0dd16504a63c4904ed1d09d" prot="public" virt="non-virtual"><scope>Spot</scope><name>up_probability</name></member>
      <member refid="class_spot_1a256d07450f2a03f75d5207216f95628e" prot="protected" virt="non-virtual"><scope>Spot</scope><name>upper_bound</name></member>
      <member refid="class_spot_1aca10a8cb4409935af0154e78e9ee47ff" prot="protected" virt="non-virtual"><scope>Spot</scope><name>z_down</name></member>
      <member refid="class_spot_1ae5283f4238abff9fe19ef902256f041f" prot="protected" virt="non-virtual"><scope>Spot</scope><name>z_up</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
